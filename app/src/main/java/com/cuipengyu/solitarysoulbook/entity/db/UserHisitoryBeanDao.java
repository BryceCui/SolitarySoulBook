package com.cuipengyu.solitarysoulbook.entity.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.cuipengyu.solitarysoulbook.entity.bean.UserHisitoryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_HISITORY_BEAN".
*/
public class UserHisitoryBeanDao extends AbstractDao<UserHisitoryBean, Long> {

    public static final String TABLENAME = "USER_HISITORY_BEAN";

    /**
     * Properties of entity UserHisitoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Hisitoryid = new Property(1, Long.class, "hisitoryid", false, "HISITORYID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property BookUrl = new Property(3, String.class, "bookUrl", false, "BOOK_URL");
    }

    private Query<UserHisitoryBean> userBean_UserHisitoryBeansQuery;

    public UserHisitoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserHisitoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_HISITORY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HISITORYID\" INTEGER," + // 1: hisitoryid
                "\"NAME\" TEXT," + // 2: name
                "\"BOOK_URL\" TEXT);"); // 3: bookUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_HISITORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserHisitoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long hisitoryid = entity.getHisitoryid();
        if (hisitoryid != null) {
            stmt.bindLong(2, hisitoryid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(4, bookUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserHisitoryBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long hisitoryid = entity.getHisitoryid();
        if (hisitoryid != null) {
            stmt.bindLong(2, hisitoryid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(4, bookUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserHisitoryBean readEntity(Cursor cursor, int offset) {
        UserHisitoryBean entity = new UserHisitoryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // hisitoryid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // bookUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserHisitoryBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHisitoryid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserHisitoryBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserHisitoryBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserHisitoryBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userHisitoryBeans" to-many relationship of UserBean. */
    public List<UserHisitoryBean> _queryUserBean_UserHisitoryBeans(Long hisitoryid) {
        synchronized (this) {
            if (userBean_UserHisitoryBeansQuery == null) {
                QueryBuilder<UserHisitoryBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Hisitoryid.eq(null));
                userBean_UserHisitoryBeansQuery = queryBuilder.build();
            }
        }
        Query<UserHisitoryBean> query = userBean_UserHisitoryBeansQuery.forCurrentThread();
        query.setParameter(0, hisitoryid);
        return query.list();
    }

}
