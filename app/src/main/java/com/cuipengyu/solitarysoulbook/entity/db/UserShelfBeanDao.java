package com.cuipengyu.solitarysoulbook.entity.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.cuipengyu.solitarysoulbook.entity.bean.UserShelfBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_SHELF_BEAN".
*/
public class UserShelfBeanDao extends AbstractDao<UserShelfBean, Long> {

    public static final String TABLENAME = "USER_SHELF_BEAN";

    /**
     * Properties of entity UserShelfBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Shelfid = new Property(1, Long.class, "shelfid", false, "SHELFID");
        public final static Property BookName = new Property(2, String.class, "bookName", false, "BOOK_NAME");
        public final static Property BookImage = new Property(3, String.class, "bookImage", false, "BOOK_IMAGE");
        public final static Property BookUrl = new Property(4, String.class, "bookUrl", false, "BOOK_URL");
    }

    private Query<UserShelfBean> userBean_UserShelfBeansQuery;

    public UserShelfBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserShelfBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_SHELF_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHELFID\" INTEGER," + // 1: shelfid
                "\"BOOK_NAME\" TEXT," + // 2: bookName
                "\"BOOK_IMAGE\" TEXT," + // 3: bookImage
                "\"BOOK_URL\" TEXT);"); // 4: bookUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_SHELF_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserShelfBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long shelfid = entity.getShelfid();
        if (shelfid != null) {
            stmt.bindLong(2, shelfid);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(3, bookName);
        }
 
        String bookImage = entity.getBookImage();
        if (bookImage != null) {
            stmt.bindString(4, bookImage);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(5, bookUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserShelfBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long shelfid = entity.getShelfid();
        if (shelfid != null) {
            stmt.bindLong(2, shelfid);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(3, bookName);
        }
 
        String bookImage = entity.getBookImage();
        if (bookImage != null) {
            stmt.bindString(4, bookImage);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(5, bookUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserShelfBean readEntity(Cursor cursor, int offset) {
        UserShelfBean entity = new UserShelfBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // shelfid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookImage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // bookUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserShelfBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShelfid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBookName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserShelfBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserShelfBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserShelfBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userShelfBeans" to-many relationship of UserBean. */
    public List<UserShelfBean> _queryUserBean_UserShelfBeans(Long shelfid) {
        synchronized (this) {
            if (userBean_UserShelfBeansQuery == null) {
                QueryBuilder<UserShelfBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Shelfid.eq(null));
                userBean_UserShelfBeansQuery = queryBuilder.build();
            }
        }
        Query<UserShelfBean> query = userBean_UserShelfBeansQuery.forCurrentThread();
        query.setParameter(0, shelfid);
        return query.list();
    }

}
